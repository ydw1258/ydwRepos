#include "Elevator.h"
#include<iostream>

Elevator::Elevator(int _curFloor, int _maxAvailableWeight)
{
	curFloor = _curFloor;
	maxAvailableWeight = _maxAvailableWeight;
	curElevatorWeight = 0;
}

int Elevator::Move()
{
	if (ReservedFloors.empty() == false && ReservedFloors.back() == curFloor) //가장 가까운 목적지에 도달
		return 1; //ElevatorMaanger 에서 Arrived 호출
	if (isMoving == false)
		return 0;
	if (moveDirection == UP)
		curFloor++;
	else
		curFloor--;
	return 0;
}

void Elevator::Arrived(map<int, vector<People>>& mapWaitingPeopleNumInFloor)
{
	ReservedFloors.pop_back();

	if (isStoppedElevatorCall == true)
	{
		isStoppedElevatorCall = false;
		BoardandPushButtons(mapWaitingPeopleNumInFloor);
		moveDirection = targetDirection;
		
		return;
	}
	OutElevator();
	BoardandPushButtons(mapWaitingPeopleNumInFloor);
}
void Elevator::OutElevator()
{
	//타고있는 사람 제거
	for (vector<People>::iterator iter = peopleInElevator.begin(); iter != peopleInElevator.end();)
	{
		if (iter->targetFloor == curFloor)
		{
			curElevatorWeight -= iter->weight;

			iter = peopleInElevator.erase(iter);
		}
		else
			++iter;
	}
}
void Elevator::BoardandPushButtons(map<int, vector<People>>& mapWaitingPeopleNumInFloor)
{
	//탑승, 버튼예약
	//현재 타겟과 예약된 버튼들 비교, 가장 가까운 타겟으로 재설정
	//현재 예약된 버튼이 없다면 가동 중지
	for (vector<People>::iterator iter = mapWaitingPeopleNumInFloor[curFloor].begin(); iter != mapWaitingPeopleNumInFloor[curFloor].end();)
	{
		//정원초과
		if (iter->weight + curElevatorWeight > maxAvailableWeight)
			break;

		if (iter->direction == targetDirection)
		{
			//현재 엘레베이터에 추가
			peopleInElevator.push_back(*iter);
			curElevatorWeight += iter->weight;
			//승객들 번호 누르기
			ReservedFloors.push_back(iter->targetFloor);
			//해당 층 인원 제거
			iter = mapWaitingPeopleNumInFloor[curFloor].erase(iter);
		}
		else
		{
			++iter;
		}
	}
	if (targetDirection == UP)
		sort(ReservedFloors.begin(), ReservedFloors.end(), greater<int>());
	else
		sort(ReservedFloors.begin(), ReservedFloors.end(), less<int>());
	if (ReservedFloors.empty() == true)
		isMoving = false;
}

//비가동중인 엘레베이터 할당
void Elevator::StoppedElevatorCall(int _targetFloor, bool peopleDirection)
{
	isStoppedElevatorCall = true;
	isMoving = true;
	ReservedFloors.push_back(_targetFloor);
	targetDirection = peopleDirection;

	if (curFloor < _targetFloor)
		moveDirection = UP;
	else
		moveDirection = DOWN;
}